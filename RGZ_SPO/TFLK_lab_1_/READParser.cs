//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from READ.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class READParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, READ=6, NEWLINE=7, SYMBOL=8, DIGIT=9;
	public const int
		RULE_prog = 0, RULE_expr = 1, RULE_term = 2, RULE_oper = 3, RULE_fmt = 4, 
		RULE_intg = 5, RULE_id = 6;
	public static readonly string[] ruleNames = {
		"prog", "expr", "term", "oper", "fmt", "intg", "id"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "','", "'('", "'*'", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "READ", "NEWLINE", "SYMBOL", "DIGIT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "READ.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static READParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public READParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public READParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(READParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(READParser.NEWLINE, i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IREADListener typedListener = listener as IREADListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IREADListener typedListener = listener as IREADListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 14;
				expr();
				State = 16;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEWLINE) {
					{
					State = 15;
					Match(NEWLINE);
					}
				}

				}
				}
				State = 20;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==READ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(READParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IREADListener typedListener = listener as IREADListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IREADListener typedListener = listener as IREADListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			Match(READ);
			State = 23;
			term();
			State = 24;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperContext oper() {
			return GetRuleContext<OperContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IREADListener typedListener = listener as IREADListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IREADListener typedListener = listener as IREADListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 4, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			oper();
			State = 27;
			id();
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 28;
				Match(T__1);
				State = 29;
				id();
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FmtContext fmt() {
			return GetRuleContext<FmtContext>(0);
		}
		public OperContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oper; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IREADListener typedListener = listener as IREADListener;
			if (typedListener != null) typedListener.EnterOper(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IREADListener typedListener = listener as IREADListener;
			if (typedListener != null) typedListener.ExitOper(this);
		}
	}

	[RuleVersion(0)]
	public OperContext oper() {
		OperContext _localctx = new OperContext(Context, State);
		EnterRule(_localctx, 6, RULE_oper);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			Match(T__2);
			State = 36;
			Match(T__3);
			State = 37;
			Match(T__1);
			State = 38;
			fmt();
			State = 39;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntgContext intg() {
			return GetRuleContext<IntgContext>(0);
		}
		public FmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IREADListener typedListener = listener as IREADListener;
			if (typedListener != null) typedListener.EnterFmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IREADListener typedListener = listener as IREADListener;
			if (typedListener != null) typedListener.ExitFmt(this);
		}
	}

	[RuleVersion(0)]
	public FmtContext fmt() {
		FmtContext _localctx = new FmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_fmt);
		try {
			State = 43;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 41;
				Match(T__3);
				}
				break;
			case DIGIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 42;
				intg();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(READParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(READParser.DIGIT, i);
		}
		public IntgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IREADListener typedListener = listener as IREADListener;
			if (typedListener != null) typedListener.EnterIntg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IREADListener typedListener = listener as IREADListener;
			if (typedListener != null) typedListener.ExitIntg(this);
		}
	}

	[RuleVersion(0)]
	public IntgContext intg() {
		IntgContext _localctx = new IntgContext(Context, State);
		EnterRule(_localctx, 10, RULE_intg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			Match(DIGIT);
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DIGIT) {
				{
				{
				State = 46;
				Match(DIGIT);
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SYMBOL() { return GetTokens(READParser.SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYMBOL(int i) {
			return GetToken(READParser.SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(READParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(READParser.DIGIT, i);
		}
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IREADListener typedListener = listener as IREADListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IREADListener typedListener = listener as IREADListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 12, RULE_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			Match(SYMBOL);
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SYMBOL || _la==DIGIT) {
				{
				{
				State = 53;
				_la = TokenStream.LA(1);
				if ( !(_la==SYMBOL || _la==DIGIT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\v', '>', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '\x13', '\n', '\x2', '\x6', '\x2', 
		'\x15', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x16', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\a', '\x4', '!', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', '$', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '.', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'\x32', '\n', '\a', '\f', '\a', '\xE', '\a', '\x35', '\v', '\a', '\x3', 
		'\b', '\x3', '\b', '\a', '\b', '\x39', '\n', '\b', '\f', '\b', '\xE', 
		'\b', '<', '\v', '\b', '\x3', '\b', '\x2', '\x2', '\t', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x2', '\x3', '\x3', '\x2', '\n', '\v', 
		'\x2', '<', '\x2', '\x14', '\x3', '\x2', '\x2', '\x2', '\x4', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\b', '%', '\x3', '\x2', '\x2', '\x2', '\n', '-', '\x3', '\x2', '\x2', 
		'\x2', '\f', '/', '\x3', '\x2', '\x2', '\x2', '\xE', '\x36', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x12', '\x5', '\x4', '\x3', '\x2', '\x11', '\x13', 
		'\a', '\t', '\x2', '\x2', '\x12', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x13', '\x3', '\x2', '\x2', '\x2', '\x13', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x10', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x14', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x17', '\x3', '\x2', '\x2', '\x2', '\x17', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x19', '\a', '\b', '\x2', '\x2', '\x19', '\x1A', 
		'\x5', '\x6', '\x4', '\x2', '\x1A', '\x1B', '\a', '\x3', '\x2', '\x2', 
		'\x1B', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x5', '\b', 
		'\x5', '\x2', '\x1D', '\"', '\x5', '\xE', '\b', '\x2', '\x1E', '\x1F', 
		'\a', '\x4', '\x2', '\x2', '\x1F', '!', '\x5', '\xE', '\b', '\x2', ' ', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '!', '$', '\x3', '\x2', '\x2', '\x2', 
		'\"', ' ', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', '\x2', 
		'\x2', '#', '\a', '\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', '\x2', 
		'\x2', '\x2', '%', '&', '\a', '\x5', '\x2', '\x2', '&', '\'', '\a', '\x6', 
		'\x2', '\x2', '\'', '(', '\a', '\x4', '\x2', '\x2', '(', ')', '\x5', '\n', 
		'\x6', '\x2', ')', '*', '\a', '\a', '\x2', '\x2', '*', '\t', '\x3', '\x2', 
		'\x2', '\x2', '+', '.', '\a', '\x6', '\x2', '\x2', ',', '.', '\x5', '\f', 
		'\a', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '-', ',', '\x3', '\x2', 
		'\x2', '\x2', '.', '\v', '\x3', '\x2', '\x2', '\x2', '/', '\x33', '\a', 
		'\v', '\x2', '\x2', '\x30', '\x32', '\a', '\v', '\x2', '\x2', '\x31', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\r', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x36', ':', '\a', '\n', '\x2', '\x2', 
		'\x37', '\x39', '\t', '\x2', '\x2', '\x2', '\x38', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x39', '<', '\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', 
		'\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x12', '\x16', '\"', '-', '\x33', ':',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
